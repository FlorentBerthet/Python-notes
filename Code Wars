# codewars.com

# Highest and Lowest (7kyu)
	# Incorrect solution. 
  # For some reason, gives '(ValueError: min() arg is an empty sequence)' even though it works on Sublime Text
  
def high_and_low(numbers):
	numbers = numbers.split(' ')
	numbers = map(int, numbers)
	numbers = max(numbers), min(numbers)
	numbers = str(numbers).replace("(", '"').replace(")",'"').replace(", "," ")
	print numbers

high_and_low("4 5 29 54 4 0 -214 542 -64 1 -3 6 -6")

	# Correct solution:

def high_and_low(numbers):
    numbers = numbers.split(' ')
    numbers = sorted(numbers, key=int)
    return numbers[-1] + ' ' + numbers[0]


# Replace With Alphabet Position

from string import ascii_lowercase

IndexedLetters = {letter: str(index) for index, letter in enumerate(ascii_lowercase, start = 1)}

def alphabet_position(text):
    text=text.lower()
    Numbers = [IndexedLetters[character] for character in text if character in IndexedLetters]
    return ' '.join(Numbers)

# Solution 2

from string import ascii_uppercase

def alphabet_position(text):
    return " ".join(str(ascii_uppercase.index(i) + 1) for i in text.upper() if i in ascii_uppercase)

# Take a Ten Minute Walk
def is_valid_walk(walk):

    if len(walk) == 10 and walk.count('n') == walk.count('s') and walk.count('w') == walk.count('e'):
    	return True
    else:
        return False

# Solution 2
def isValidWalk(walk):
    return len(walk) == 10 and walk.count('n') == walk.count('s') and walk.count('e') == walk.count('w')

# Find the odd int
def find_it(seq):
    for i in seq:
    	if seq.count(i) %2 != 0:
    		return i

# Exes and Ohs
	# Check to see if a string has the same amount of 'x's and 'o's.
	# The method must return a boolean and be case insensitive. The string can contain any char.
def xo(s):
	if s.count('x')+s.count('X') == s.count('o')+s.count('O'):
        # if the sum of x's and X's is equal to the sum of o's and O's
		return True
	else:
		return False

# Solution 2

def xo(s):
    s = s.lower()
    return s.count('x') == s.count('o')

# Sum of odd numbers
"""
Given the triangle of consecutive odd numbers:
             1
          3     5
       7     9    11
   13    15    17    19
21    23    25    27    29
...
Calculate the row sums of this triangle from the row index (starting at index 1) e.g.:

row_sum_odd_numbers(1); # 1
row_sum_odd_numbers(2); # 3 + 5 = 8
"""
def row_sum_odd_numbers(n):
    #your code here
